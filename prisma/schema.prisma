datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
  AUTHOR
  MODERATOR
}

model Category {
  id_category Int     @id @default(autoincrement())
  title       String? @db.VarChar(255)
  slug        String? @unique @db.VarChar(255)
  imageUrl    String? @db.VarChar(255)
  description String? @db.Text
  books       Book[]

  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id_banner Int      @id @default(autoincrement())
  title     String?  @db.VarChar(255)
  imageUrl  String?  @db.VarChar(255)
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Author {
  id_author       Int      @id @unique @default(autoincrement())
  name            String?  @db.VarChar(255)
  slug            String?  @unique @db.VarChar(255)
  biography       String?  @db.Text
  profileImageUrl String?  @db.VarChar(255)
  isActive        Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  storyGenre      String?
  mainGenre       String?
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId Int
  books  Book[]
}

model Book {
  id          Int      @id @default(autoincrement())
  userId      Int
  id_category Int
  slug        String   @unique
  title       String
  content     String?  @db.Text
  imageUrl    String
  published   String
  language    String
  format      String
  isbn        String
  isActive    Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  genres          Genre[]   @relation("BookGenres")
  category        Category  @relation(fields: [id_category], references: [id_category], onDelete: Cascade, onUpdate: Cascade)
  user            User      @relation(fields: [userId], references: [id])
  comments        Comment[]
  authorName      String
  Author          Author?   @relation(fields: [authorId_author], references: [id_author])
  authorId_author Int?
  images          Image[]
}

model User {
  id                Int      @id @default(autoincrement())
  name              String?
  email             String?  @unique
  emailVerified     Boolean  @default(false)
  password          String?
  role              UserRole @default(USER)
  verificationToken String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  books    Book[]
  authors  Author[]
  comments Comment[]
  profile  UserProfile[]
}

model UserProfile {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  name            String?
  firstName       String?
  lastName        String?
  dateOfBirth     DateTime
  profileImageUrl String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  imageUrl    String?
  review_date DateTime?
  rate        Int?

  userId Int
  bookId Int

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookName String @ignore
  userName String @ignore
}

model Genre {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[] @relation("BookGenres")
}

model Image {
  id     Int    @id @default(autoincrement())
  url    String
  book   Book   @relation(fields: [bookId], references: [id])
  bookId Int
}
